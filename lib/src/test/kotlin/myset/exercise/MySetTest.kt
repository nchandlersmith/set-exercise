/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package myset.exercise

import kotlin.test.*

class MySetTest {
    @Test
    fun `isEmpty returns true when empty`() {
        val mySet = MySet()
        val result = mySet.isEmpty()
        assertTrue(result)
    }
    @Test
    fun `isEmpty returns false when not empty`() {
        val mySet = MySet()
        mySet.add("a")
        val result = mySet.isEmpty()
        assertFalse(result)
    }
    @Test
    fun `size returns 0 for empty set`() {
        val mySet = MySet()
        val result = mySet.size
        assertEquals(0, result)
    }
    @Test
    fun `size returns 1 for set with 1 element`() {
        val mySet = MySet()
        mySet.add("a")

        val result = mySet.size

        assertEquals(1, result)
    }
    @Test
    fun `contains 'a' returns true for set with a element`() {
        val mySet = MySet()
        mySet.add("a")

        val result = mySet.contains("a")

        assertTrue(result)
    }
    @Test
    fun `contains 'a' returns false empty set`() {
        val mySet = MySet()
        val result = mySet.contains("a")
        assertFalse(result)
    }
    @Test
    fun `contains 'a' returns false for a nonempty set without an 'a' element`() {
        val mySet = MySet()
        mySet.add("b")

        val result = mySet.contains("a")

        assertFalse(result)
    }
    @Test
    fun `remove 'a' removes 'a' from the set`() {
        val mySet = MySet()
        mySet.add("a")
        mySet.add("b")

        mySet.remove("a")

        assertEquals("b", mySet.setValue[0]) // would rather test implementation than use prod code
        assertEquals(null, mySet.setValue[1])
    }
    @Test
    fun `remove reduces size by 1`() {
        val mySet = MySet()
        mySet.add("a")
        mySet.add("b")

        mySet.remove("a")

        assertEquals(1, mySet.size) // would rather test implementation than use prod code
    }
    @Test
    fun `remove does not delete element that does not exist`() {
        val mySet = MySet()
        mySet.add("a")
        mySet.add("b")

        mySet.remove("element does not exist")

        assertEquals(2, mySet.size) // would rather test implementation than use prod code
        assertEquals("a", mySet.setValue[0])
        assertEquals("b", mySet.setValue[1])
    }
    @Test
    fun `remove does not add element already in set`() {
        val mySet = MySet()
        mySet.add("a")

        mySet.add("a")

        assertEquals(1, mySet.size) // would rather test implementation than use prod code
    }
}
